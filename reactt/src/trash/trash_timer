  // const [timer, setTimer] = useState(60);    
  // const  timeOutCallback = useCallback(() => setTimer(currTimer => currTimer - 1), []);
  
  // useEffect(() => {
  //   timer > 0 && setTimeout(timeOutCallback, 1000);
  // }, [timer, timeOutCallback]);
  
  // console.log(timer);
  
  // const resetTimer = function () {
  //   if (!timer) {
  //     setTimer(60);
  //   }
  // };

  // const DelayedButton = () => {
  //   const delay = 10000;
  //   const label = "hi";
  //   const [isActive, setIsActive] = useState(false);
  
  //   useEffect(() => {
  //     const timer = setTimeout(() => {
  //       setIsActive(true);
  //     }, delay);
  
  //     return () => clearTimeout(timer);
  //   }, [delay]);
  
  //   return (
  //     <button onClick={handleSendOtpClick} disabled={!isActive}>
  //       {isActive ? label : `Please wait ${Math.ceil(delay / 1000)}s`}
  //     </button>
  //   );
  // }
  // const [timer, setTimer] = useState(10);    
  // const  timeOutCallback = useCallback(() => setTimer(currTimer => currTimer - 1), []);
  
  // useEffect(() => {
  //   timer > 0 && setTimeout(timeOutCallback, 1000);
  // }, [timer, timeOutCallback]);
  
  // console.log(timer);

  // if(timer == 0) settimrout(true)




  const handleReset = () => {
    clearInterval(intervalRef.current);
    intervalRef.current = null;
    setIsActive(false);
    setCount(10);
  };


  const startTimer = () => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
    setIsActive(true);
    intervalRef.current = setInterval(() => {
      setCount(count => count - 1);
    }, 1000);
  };
